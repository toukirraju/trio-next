{"version":3,"file":"colors.js","sourceRoot":"","sources":["colors.ts"],"names":[],"mappings":"AAAA,aAAa;AACb,OAAO,UAAU,MAAM,aAAa,CAAC;AACrC,aAAa;AACb,OAAO,OAAO,MAAM,eAAe,CAAC;AASpC,MAAM,QAAQ,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;AAChC,MAAM,QAAQ,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;AAEpC,MAAM,UAAU,YAAY,CAAC,KAAa;IACtC,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAExC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACZ,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC;IAC3B,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC;IAElD,OAAO,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;AACxC,CAAC;AAED,SAAS,QAAQ,CAAC,IAAmB,EAAE,GAAW,EAAE,SAAiB;IACjE,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CACxB,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAClD,CAAC,CAAC,CAAC,EACA,QAAQ,GAAG,UAAU,GAAG,GAAG,CAAC;IAChC,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,QAAQ,GAAG,GAAG,CAAC,CAAC;AAClD,CAAC;AAED,SAAS,OAAO,CAAC,GAAW,EAAE,SAAiB;IAC3C,IAAI,CAAC,GAAG,EAAE,CAAC;QACP,OAAO,EAAE,CAAC;IACd,CAAC;IAED,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACvC,MAAM,GAAG,GAAG,CAAC,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;IACjD,MAAM,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;IACjD,MAAM,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;IAEpD,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC;AAC3D,CAAC;AAED,SAAS,MAAM,CAAC,GAAW,EAAE,SAAiB;IAC1C,IAAI,CAAC,GAAG,EAAE,CAAC;QACP,OAAO,EAAE,CAAC;IACd,CAAC;IAED,MAAM,gBAAgB,GAAG,CAAC,GAAG,SAAS,CAAC;IACvC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACvC,MAAM,GAAG,GAAG,CAAC,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAAC;IACxD,MAAM,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC;IAChE,MAAM,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC;IAEnD,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC;AAC3D,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,GAAW;IAC3C,OAAO,0BAA0B,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAChD,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,KAAa;IACtC,MAAM,EAAE,IAAI,EAAE,GAAG,UAAU,CAAC,IAAI,KAAK,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnE,MAAM,aAAa,GAAG,IAAI;SACrB,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;SACrB,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;SACpB,WAAW,EAAE,CAAC;IAEnB,OAAO,aAAa,CAAC;AACzB,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,QAAgB;IAC9C,MAAM,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IAC3C,OAAO,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC;QAC5B,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC;QAClC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CACxB,EAAE,CAAC;AACX,CAAC;AAED,SAAS,SAAS,CAAC,GAAW,EAAE,KAAc;IAC1C,kCAAkC;IAClC,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAE5B,uBAAuB;IACvB,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAEZ,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACnB,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAClC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAClC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACtC,CAAC;SAAM,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC1B,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACtC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACtC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAC1C,CAAC;SAAM,CAAC;QACJ,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAC9C,CAAC;IAED,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;QACtB,sCAAsC;QACtC,OAAO,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK,GAAG,CAAC;IAC9C,CAAC;SAAM,CAAC;QACJ,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IAC5B,CAAC;AACL,CAAC;AA2DD,MAAM,CAAC,OAAO,UAAU,eAAe,CAAC,SAAkB,EAAE,MAI3D;IACG,IAAI,CAAC,SAAS,EAAE,CAAC;QACb,OAAO;IACX,CAAC;IAED,MAAM,aAAa,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;IAEnD,MAAM,IAAI,GAAG,YAAY,CAAC,aAAa,CAAC,CAAC;IAEzC,MAAM,QAAQ,GAAY;QACtB,IAAI;QACJ,MAAM,EAAE,EAAE;KACb,CAAC;IAEF,MAAM,YAAY,GAEd;QACA,IAAI,EAAE,IAAI;QACV,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,GAAG;QACV,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,GAAG;QACV,KAAK,EAAE,GAAG;QACV,KAAK,EAAE,CAAC;QACR,KAAK,EAAE,GAAG;QACV,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,GAAG;QACV,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,IAAI,EAAG,eAAe;QAC/B,MAAM,EAAE,IAAI,EAAI,gBAAgB;KACnC,CAAC;IAEF,MAAM,YAAY,GAAG,CAAC,KAAa,EAAE,EAAE;QACnC,IAAI,MAAM,EAAE,SAAS,KAAK,KAAK,EAAE,CAAC;YAC9B,OAAO,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;QAC1C,CAAC;QACD,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC;IAEF,MAAM,gBAAgB,GAAG,MAAM,EAAE,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAkB,CAAC;IAEtF,gBAAgB,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;QAC/B,IAAI,KAAK,KAAK,KAAK,EAAE,CAAC;YAClB,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,YAAY,CAAC,aAAa,CAAC,CAAC;QACzD,CAAC;aAAM,CAAC;YACJ,MAAM,SAAS,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;YACtC,MAAM,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,KAAK,OAAO;gBAC5C,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,SAAS,CAAC;gBACnC,CAAC,CAAC,MAAM,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;YACvC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;QACjF,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,QAAmB,CAAC;AAC/B,CAAC","sourcesContent":["// @ts-ignore\r\nimport colorNamer from \"color-namer\";\r\n// @ts-ignore\r\nimport convert from \"color-convert\";\r\n\r\nexport type Palette = {\r\n    name: string;\r\n    colors: {\r\n        [key: number]: string;\r\n    };\r\n};\r\n\r\nconst CMY_HUES = [180, 300, 60];\r\nconst RGB_HUES = [360, 240, 120, 0];\r\n\r\nexport function getTextColor(color: string): \"#FFF\" | \"#333\" {\r\n    const rgbColor = convert.hex.rgb(color);\r\n\r\n    if (!rgbColor) {\r\n        return \"#333\";\r\n    }\r\n\r\n    const [r, g, b] = rgbColor;\r\n    const luma = 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n\r\n    return luma < 120 ? \"#FFF\" : \"#333\";\r\n}\r\n\r\nfunction hueShift(hues: Array<number>, hue: number, intensity: number) {\r\n    const closestHue = hues.sort(\r\n        (a, b) => Math.abs(a - hue) - Math.abs(b - hue)\r\n    )[0],\r\n        hueShift = closestHue - hue;\r\n    return Math.round(intensity * hueShift * 0.5);\r\n}\r\n\r\nfunction lighten(hex: string, intensity: number): string {\r\n    if (!hex) {\r\n        return \"\";\r\n    }\r\n\r\n    const [h, s, v] = convert.hex.hsv(hex);\r\n    const hue = h + hueShift(CMY_HUES, h, intensity);\r\n    const saturation = s - Math.round(s * intensity);\r\n    const value = v + Math.round((100 - v) * intensity);\r\n\r\n    return `#${convert.hsv.hex([hue, saturation, value])}`;\r\n}\r\n\r\nfunction darken(hex: string, intensity: number): string {\r\n    if (!hex) {\r\n        return \"\";\r\n    }\r\n\r\n    const inverseIntensity = 1 - intensity;\r\n    const [h, s, v] = convert.hex.hsv(hex);\r\n    const hue = h + hueShift(RGB_HUES, h, inverseIntensity);\r\n    const saturation = s + Math.round((100 - s) * inverseIntensity);\r\n    const value = v - Math.round(v * inverseIntensity);\r\n\r\n    return `#${convert.hsv.hex([hue, saturation, value])}`;\r\n}\r\n\r\nexport function isValidHexColorCode(str: string) {\r\n    return /^#([0-9A-Fa-f]{3}){1,2}$/.test(str);\r\n}\r\n\r\nexport function getColorName(color: string): string {\r\n    const { name } = colorNamer(`#${color}`.replace(\"##\", \"#\")).ntc[0];\r\n    const sanitizedName = name\r\n        .replace(/['/]/gi, \"\")\r\n        .replace(/\\s+/g, \"-\")\r\n        .toLowerCase();\r\n\r\n    return sanitizedName;\r\n}\r\n\r\nexport function sixDigitsColorHex(hexColor: string) {\r\n    const hexValue = hexColor.replace(\"#\", \"\");\r\n    return `#${hexValue.length === 3\r\n        ? hexValue.replace(/(.)/g, \"$1$1\")\r\n        : hexValue.padEnd(6, \"0\")\r\n        }`;\r\n}\r\n\r\nfunction hexToRgba(hex: string, alpha?: number): string {\r\n    // Remove the leading # if present\r\n    hex = hex.replace(/^#/, \"\");\r\n\r\n    // Parse r, g, b values\r\n    let r, g, b;\r\n\r\n    if (hex.length === 3) {\r\n        r = parseInt(hex[0] + hex[0], 16);\r\n        g = parseInt(hex[1] + hex[1], 16);\r\n        b = parseInt(hex[2] + hex[2], 16);\r\n    } else if (hex.length === 6) {\r\n        r = parseInt(hex.substring(0, 2), 16);\r\n        g = parseInt(hex.substring(2, 4), 16);\r\n        b = parseInt(hex.substring(4, 6), 16);\r\n    } else {\r\n        throw new Error(\"Invalid hex color code\");\r\n    }\r\n\r\n    if (alpha !== undefined) {\r\n        // return `${r} ${g} ${b} / ${alpha}`;\r\n        return `rgba(${r}, ${g}, ${b}, ${alpha})`;\r\n    } else {\r\n        return `${r} ${g} ${b}`;\r\n    }\r\n}\r\n\r\n// export default function getColorPalette(baseColor?: string, option?: {\r\n//     colorType?: \"hex\" | \"rgb\";\r\n//     alpha?: number;\r\n// }): Palette | undefined {\r\n//     if (!baseColor) {\r\n//         return;\r\n//     }\r\n\r\n//     const fullColorCode = sixDigitsColorHex(baseColor);\r\n\r\n//     const name = getColorName(fullColorCode);\r\n\r\n//     const response: Palette = {\r\n//         name,\r\n//         colors: {\r\n//             500: fullColorCode,\r\n//         },\r\n//     };\r\n\r\n//     const intensityMap: {\r\n//         [key: number]: number;\r\n//     } = {\r\n//         25: 0.97,\r\n//         50: 0.95,\r\n//         100: 0.9,\r\n//         200: 0.75,\r\n//         300: 0.6,\r\n//         400: 0.3,\r\n//         600: 0.9,\r\n//         700: 0.75,\r\n//         800: 0.6,\r\n//         900: 0.45,\r\n//         950: 0.29,\r\n//     };\r\n\r\n//     const convertColor = (color: string) => {\r\n//         if (option?.colorType === \"rgb\") {\r\n//             return hexToRgba(color, option.alpha);\r\n//         }\r\n//         return color;\r\n//     };\r\n\r\n//     [25, 50, 100, 200, 300, 400].forEach((level) => {\r\n//         const color = lighten(fullColorCode, intensityMap[level]);\r\n//         response.colors[level] = convertColor(color);\r\n//     });\r\n\r\n//     [500, 600, 700, 800, 900, 950].forEach((level) => {\r\n//         const color = level === 500 ? fullColorCode : darken(fullColorCode, intensityMap[level]);\r\n//         response.colors[level] = convertColor(color);\r\n//     });\r\n\r\n//     return response as Palette;\r\n// }\r\n\r\ntype ShadeOption = '25' | '50' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '950' | 'light' | 'dark';\r\n\r\nexport default function getColorPalette(baseColor?: string, option?: {\r\n    colorType?: \"hex\" | \"rgb\";\r\n    alpha?: number;\r\n    shades?: ShadeOption[];\r\n}): Palette | undefined {\r\n    if (!baseColor) {\r\n        return;\r\n    }\r\n\r\n    const fullColorCode = sixDigitsColorHex(baseColor);\r\n\r\n    const name = getColorName(fullColorCode);\r\n\r\n    const response: Palette = {\r\n        name,\r\n        colors: {},\r\n    };\r\n\r\n    const intensityMap: {\r\n        [key in ShadeOption]: number;\r\n    } = {\r\n        '25': 0.97,\r\n        '50': 0.95,\r\n        '100': 0.9,\r\n        '200': 0.75,\r\n        '300': 0.6,\r\n        '400': 0.3,\r\n        '500': 0,\r\n        '600': 0.9,\r\n        '700': 0.75,\r\n        '800': 0.6,\r\n        '900': 0.45,\r\n        '950': 0.29,\r\n        'light': 0.95,  // Same as '50'\r\n        'dark': 0.45,   // Same as '900'\r\n    };\r\n\r\n    const convertColor = (color: string) => {\r\n        if (option?.colorType === \"rgb\") {\r\n            return hexToRgba(color, option.alpha);\r\n        }\r\n        return color;\r\n    };\r\n\r\n    const shadesToGenerate = option?.shades || Object.keys(intensityMap) as ShadeOption[];\r\n\r\n    shadesToGenerate.forEach((shade) => {\r\n        if (shade === '500') {\r\n            response.colors[shade] = convertColor(fullColorCode);\r\n        } else {\r\n            const intensity = intensityMap[shade];\r\n            const color = shade < '500' || shade === 'light'\r\n                ? lighten(fullColorCode, intensity)\r\n                : darken(fullColorCode, intensity);\r\n            response.colors[Number(shade) ? Number(shade) : shade] = convertColor(color);\r\n        }\r\n    });\r\n\r\n    return response as Palette;\r\n}"]}