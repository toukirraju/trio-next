{"version":3,"file":"TableBody1.jsx","sourceRoot":"","sources":["TableBody1.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport { cn } from '@/utils/cn';\nimport { useState } from 'react';\n\ntype TableBodyProps = {\n  columns: any[];\n  records: any[];\n  toggleProduct: any[];\n  handleAllDataSelectedRecords: (row: any) => void;\n  showSelectBox: boolean;\n  rowClasses?: (row: any) => string;\n  cellClasses?: (row: any, value: any) => string;\n  stripedColor?: string;\n  stripedHoverColor?: string;\n  striped?: boolean;\n  selectBoxWrapperClass?: string;\n};\n\nconst TableBody = ({\n  columns,\n  records,\n  toggleProduct,\n  handleAllDataSelectedRecords,\n  showSelectBox,\n  rowClasses,\n  cellClasses,\n  stripedColor,\n  stripedHoverColor,\n  striped = false,\n  selectBoxWrapperClass\n}: TableBodyProps) => {\n  const [hoveredRow, setHoveredRow] = useState<number | null>(null);\n\n  const handleMouseEnter = (index: number) => {\n    if (striped && stripedHoverColor) {\n      setHoveredRow(index);\n    }\n  };\n\n  const handleMouseLeave = () => {\n    setHoveredRow(null);\n  };\n  return (\n    <tbody\n    //  style={{ display: \"block\", width: \"100%\", height: \"150px\", overflow: \"auto\" }}\n    // className=\"h-10 overflow-y-auto w-full block \"\n    >\n      {/* table body html code */}\n      {records?.map((row, index) => {\n        const rowStyle = {\n          background:\n            striped && index % 2 !== 0 && !hoveredRow\n              ? stripedColor\n              : striped && index % 2 !== 0 && hoveredRow === index\n                ? stripedHoverColor\n                : undefined\n        };\n        return (\n          <tr\n            key={index}\n            // style={rowStyle}\n            // onMouseEnter={() => handleMouseEnter(index)}\n            // onMouseLeave={handleMouseLeave}\n            className={rowClasses && rowClasses(row)}\n          >\n            {showSelectBox && (\n              <td\n                // style={{ textAlign: 'right' }}\n                className={cn('w-7', selectBoxWrapperClass && selectBoxWrapperClass)}\n              >\n                <input\n                  aria-label=\"row-select\"\n                  type=\"checkbox\"\n                  checked={toggleProduct.some((item) => item.id === row.id)}\n                  onChange={() => handleAllDataSelectedRecords(row)}\n                />\n              </td>\n            )}\n            {columns?.map((col, index) => (\n              <td\n                style={{\n                  width: col?.width && `${col?.width}`,\n                  textAlign: col?.align && col?.align,\n                  color: col?.color && col?.color,\n                  background: col?.bg && col?.bg,\n                  fontWeight: col?.fontWidth && col?.fontWidth,\n                  fontSize: col?.fontSize && col?.fontSize,\n                  ...(col?.py && { padding: `${col?.py} 0` }),\n                  ...(col?.px && { padding: `0 ${col?.px}` }),\n                  ...(col?.pl && { paddingLeft: `${col?.pl}` }),\n                  ...(col?.pr && { paddingRight: `${col?.pr}` })\n                }}\n                key={index}\n                className={`${\n                  cellClasses && cellClasses(row, row[col.accessor])\n                } ${col?.classNames && col?.classNames}`}\n              >\n                {col?.render ? col?.render(row) : row[col.accessor]}\n              </td>\n            ))}\n          </tr>\n        );\n      })}\n    </tbody>\n  );\n};\n\nexport default TableBody;\n"]}