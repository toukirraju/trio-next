{"version":3,"file":"Checkbox.jsx","sourceRoot":"","sources":["Checkbox.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAkB,MAAM,OAAO,CAAC;AAEvC,OAAO,EAAE,gBAAgB,EAAE,MAAM,kCAAkC,CAAC;AACpE,OAAO,EAAE,MAAM,EAAE,MAAM,4BAA4B,CAAC;AASpD,IAAM,QAAQ,GAAsB,UAAC,EAQpC;IACC,qEAAqE;IARrE,IAAA,EAAE,QAAA,EACF,aAAiB,EAAjB,KAAK,mBAAG,SAAS,KAAA,EACjB,aAAgB,EAAhB,KAAK,mBAAG,QAAQ,KAAA,EAChB,KAAK,WAAA,EACL,IAAI,UAAA,EACJ,iBAAuB,EAAZ,OAAO,mBAAG,EAAE,KAAA,EACpB,KAAK,cAP2B,sDAQpC,CADS;IAIR,OAAO,CACL,CAAC,GAAG,CACF,SAAS,CAAC,CAAC,mBACT,KAAK,IAAI,SAAS,yEACkD,CAAC,CAEvE;MAAA,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAC/C;QAAA,CAAC,IAAI,CACH,SAAS,CAAC,CAAC,+MACT,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,0BACpC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,0BACtC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,0BACtC,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,yBACtC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,oCAAoC,CAAC,CAAC,CAAC,EAAE,yBAC/D,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC,iCAAiC,CAAC,CAAC,CAAC,EAAE,yBACzD,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,oCAAoC,CAAC,CAAC,CAAC,EAAE,yBAC/D,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,oCAAoC,CAAC,CAAC,CAAC,EAAE,yBAC/D,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,kCAAkC,CAAC,CAAC,CAAC,EAAE,eAC/D,CAAC,CAEA;UAAA,CAAC,KAAK,CACJ,EAAE,CAAC,CAAC,EAAE,CAAC,CACP,IAAI,CAAC,UAAU,CACf,SAAS,CAAC,CAAC,yFAAkF,OAAO,CAAE,CAAC,CACvG,IAAI,KAAK,CAAC,EAEZ;UAAA,CAAC,MAAM,CACL,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAClC,SAAS,CAAC,CAAC,4KACP,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,oCAAoC,CAAC,CAAC,CAAC,YAAY,mBAC5E,CAAC,EAEJ;UAAA,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,UAAG,gBAAgB,CAAC,EAAE,KAAK,OAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAE,CAAC,CAAC,EAAE,IAAI,CAClE;QAAA,EAAE,IAAI,CACN;QAAA,CAAC,KAAK,IAAI,CACR,CAAC,IAAI,CAAC,SAAS,CAAC,qFAAqF,CACnG;YAAA,CAAC,KAAK,CACR;UAAA,EAAE,IAAI,CAAC,CACR,CACH;MAAA,EAAE,KAAK,CACT;IAAA,EAAE,GAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,QAAQ,CAAC","sourcesContent":["import React, { type FC } from 'react';\nimport type { VariantProps } from 'class-variance-authority';\nimport { checkboxVariants } from '../../variants/checkbox-variants';\nimport { ReIcon } from '@/components/ReIcon/ReIcon';\n\nexport interface CheckboxProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'color'>,\n    VariantProps<typeof checkboxVariants> {\n  label?: string;\n  icon?: string;\n}\n\nconst Checkbox: FC<CheckboxProps> = ({\n  id,\n  color = 'default',\n  shape = 'smooth',\n  label,\n  icon,\n  className: classes = '',\n  ...props\n}) => {\n  // const checkboxId = label.toLocaleLowerCase().replaceAll(\" \", \"-\");\n\n  return (\n    <div\n      className={`checkbox-${\n        color || 'default'\n      }  relative inline-block cursor-pointer leading-tight overflow-hidden`}\n    >\n      <label htmlFor={id} className=\"flex items-center\">\n        <span\n          className={`shrink-0 relative flex h-5 w-5 items-center justify-center border-muted-300 dark:border-muted-700 overflow-hidden border-2 bg-muted-100 transition-shadow duration-300 dark:bg-muted-800 \n          ${shape === 'rounded' ? 'rounded' : ''} \n          ${shape === 'smooth' ? 'rounded-md' : ''} \n          ${shape === 'curved' ? 'rounded-lg' : ''} \n          ${shape === 'full' ? 'rounded-full' : ''}\n          ${color === 'primary' ? 'focus-within:border-primary-500/20' : ''}\n          ${color === 'info' ? 'focus-within:border-info-500/20' : ''}\n          ${color === 'success' ? 'focus-within:border-success-500/20' : ''}\n          ${color === 'warning' ? 'focus-within:border-warning-500/20' : ''}\n          ${color === 'danger' ? 'focus-within:border-error-500/20' : ''}\n        `}\n        >\n          <input\n            id={id}\n            type=\"checkbox\"\n            className={`peer absolute start-0 top-0 z-[3] h-full w-full cursor-pointer appearance-none ${classes}`}\n            {...props}\n          />\n          <ReIcon\n            iconName={icon ? icon : 'GoCheck'}\n            className={`relative start-0 z-[2] h-3 w-3 translate-y-5 scale-0 transition-transform delay-150 duration-300 peer-checked:translate-y-0 peer-checked:scale-100\n              ${color === 'default' ? 'text-muted-700 dark:text-muted-100' : 'text-white'}\n            `}\n          />\n          <span className={`${checkboxVariants({ color, shape })}`}></span>\n        </span>\n        {label && (\n          <span className=\"ms-2 cursor-pointer font-sans text-sm text-muted-500 dark:text-muted-400 capitalize\">\n            {label}\n          </span>\n        )}\n      </label>\n    </div>\n  );\n};\n\nexport default Checkbox;\n"]}