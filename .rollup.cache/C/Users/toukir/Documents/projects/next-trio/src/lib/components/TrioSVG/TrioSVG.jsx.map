{"version":3,"file":"TrioSVG.jsx","sourceRoot":"","sources":["TrioSVG.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAUnD,MAAM,OAAO,GAAG,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAgB,EAAE,EAAE;IACrE,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;QAC5B,OAAO,CACL,CAAC,SAAS,CACR,GAAG,CAAC,CAAC,GAAG,CAAC,CACT,MAAM,CAAC,CAAC,MAAM,CAAC,CACf,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,MAAM,CAAC,CAAC,MAAM,CAAC,EACf,CACH,CAAC;IACJ,CAAC;IAED,OAAO,CACL,CAAC,YAAY,CACX,GAAG,CAAC,CAAC,GAAG,CAAC,CACT,MAAM,CAAC,CAAC,MAAM,CAAC,CACf,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,MAAM,CAAC,CAAC,MAAM,CAAC,EACf,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,OAAO,CAAC;AAEvB,oGAAoG;AACpG,MAAM,SAAS,GAAG,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAgB,EAAE,EAAE;IACvE,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAgB,IAAI,CAAC,CAAC;IAElE,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,QAAQ,GAAG,KAAK,IAAI,EAAE;YAC1B,IAAI,CAAC;gBACH,IAAI,MAAM,GAAG,EAAE,CAAC;gBAChB,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;oBAC5B,MAAM,GAAG,GAAG,CAAC;gBACf,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;gBACtC,CAAC;gBAED,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;gBAC1D,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;oBACjB,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;gBACzC,CAAC;gBAED,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACtC,aAAa,CAAC,OAAO,CAAC,CAAC;YACzB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;YAC9C,CAAC;QACH,CAAC,CAAC;QAEF,QAAQ,EAAE,CAAC;IACb,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IAEV,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,sCAAsC;QACtC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,iCAAiC;IACjC,MAAM,MAAM,GAAG,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IACvE,MAAM,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC,CAAY,CAAC;IAE9C,IAAI,KAAK,CAAC,OAAO,KAAK,KAAK,EAAE,CAAC;QAC5B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,yBAAyB;IACzB,IAAI,KAAK;QAAE,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IACtD,IAAI,MAAM;QAAE,KAAK,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;IAEzD,qCAAqC;IACrC,IAAI,MAAM,EAAE,CAAC;QACX,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YACjC,IAAI,KAAK,YAAY,OAAO,EAAE,CAAC;gBAC7B,4BAA4B,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAC9C,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,wBAAwB;IACxB,IAAI,IAAI,EAAE,CAAC;QACT,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YACjC,IAAI,KAAK,YAAY,OAAO,EAAE,CAAC;gBAC7B,KAAK,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YACnC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,sBAAsB;IACtB,MAAM,gBAAgB,GAAG,IAAI,aAAa,EAAE,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IAEtE,OAAO,CACL,CAAC,GAAG,CACF,KAAK,CAAC,CAAC;YACL,OAAO,EAAE,MAAM;YACf,cAAc,EAAE,QAAQ;YACxB,UAAU,EAAE,QAAQ;SACrB,CAAC,CACF,uBAAuB,CAAC,CAAC,EAAE,MAAM,EAAE,gBAAgB,EAAE,CAAC,EACtD,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,kCAAkC;AAClC,MAAM,4BAA4B,GAAG,CAAC,OAAgB,EAAE,MAAc,EAAE,EAAE;IACxE,IAAI,OAAO,CAAC,OAAO,KAAK,MAAM,EAAE,CAAC;QAC/B,OAAO,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IACzC,CAAC;IAED,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;QACrB,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAC7C,4BAA4B,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC;AAEF,kFAAkF;AAClF,MAAM,YAAY,GAA2B,CAAC,EAC5C,GAAG,EACH,MAAM,EACN,IAAI,GAAG,MAAM,EACb,KAAK,EACL,MAAM,GACP,EAAE,EAAE;IACH,MAAM,UAAU,GAAG,KAAK,CAAC,YAAY,CACnC,GAAyE,EACzE;QACE,KAAK,EACH,KAAK;YAEH,GAID,CAAC,KAAK,CAAC,KAAK;QACf,MAAM,EACJ,MAAM;YAEJ,GAID,CAAC,KAAK,CAAC,MAAM;QAChB,IAAI;QACJ,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC,GAAG,CAExB,GAID,CAAC,KAAK,CAAC,QAAQ,EAChB,CAAC,KAAK,EAAE,EAAE;YACR,IAAI,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC;gBAChC,OAAO,qBAAqB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAC9C,CAAC;YACD,OAAO,KAAK,CAAC;QACf,CAAC,CACF;KACF,CACF,CAAC;IAEF,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAEF,2BAA2B;AAC3B,MAAM,qBAAqB,GAAQ,CAAC,OAAY,EAAE,MAAW,EAAE,EAAE;IAC/D,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,IAAI,EAAE,GAAG,OAAO,CAAC,KAAK,CAAC;IAEnD,MAAM,KAAK,GAAQ,EAAE,CAAC;IACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QAChC,MAAM,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;QACrE,KAAK,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,MAAM,KAAK,GAAG;QACZ,KAAK,EAAE;YACL,GAAG,KAAK;YACR,MAAM;SACP;QACD,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE;YAC/C,OAAO,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC;gBAChC,CAAC,CAAC,qBAAqB,CAAC,KAAK,EAAE,MAAM,CAAC;gBACtC,CAAC,CAAC,KAAK,CAAC;QACZ,CAAC,CAAC;KACH,CAAC;IAEF,OAAO,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,CAAC,CAAC;AACnE,CAAC,CAAC","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\ntype TrioSVGProps = {\r\n  svg: string | React.ReactElement;\r\n  stroke?: string;\r\n  fill?: string;\r\n  width?: string | number;\r\n  height?: string | number;\r\n};\r\n\r\nconst TrioSVG = ({ svg, stroke, fill, width, height }: TrioSVGProps) => {\r\n  if (typeof svg === \"string\") {\r\n    return (\r\n      <StringSVG\r\n        svg={svg}\r\n        stroke={stroke}\r\n        fill={fill}\r\n        width={width}\r\n        height={height}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <SVGComponent\r\n      svg={svg}\r\n      stroke={stroke}\r\n      fill={fill}\r\n      width={width}\r\n      height={height}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TrioSVG;\r\n\r\n// This component will change the stroke color of the SVG file which is located in the public folder\r\nconst StringSVG = ({ svg, stroke, fill, width, height }: TrioSVGProps) => {\r\n  const [svgContent, setSvgContent] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchSvg = async () => {\r\n      try {\r\n        let svgUrl = \"\";\r\n        if (typeof svg === \"string\") {\r\n          svgUrl = svg;\r\n        } else {\r\n          throw new Error(\"Invalid SVG prop\");\r\n        }\r\n\r\n        const response = await fetch(svgUrl, { mode: \"no-cors\" });\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch SVG\");\r\n        }\r\n\r\n        const svgText = await response.text();\r\n        setSvgContent(svgText);\r\n      } catch (error) {\r\n        console.error(\"Error fetching SVG:\", error);\r\n      }\r\n    };\r\n\r\n    fetchSvg();\r\n  }, [svg]);\r\n\r\n  if (!svgContent) {\r\n    // Render loading state or placeholder\r\n    return null;\r\n  }\r\n\r\n  // Parse SVG and get root element\r\n  const svgDOM = new DOMParser().parseFromString(svgContent, \"text/xml\");\r\n  const svgEl = svgDOM.childNodes[0] as Element;\r\n\r\n  if (svgEl.tagName !== \"svg\") {\r\n    return null;\r\n  }\r\n\r\n  // Update root props only\r\n  if (width) svgEl.setAttribute(\"width\", String(width));\r\n  if (height) svgEl.setAttribute(\"height\", String(height));\r\n\r\n  // Update children stroke recursively\r\n  if (stroke) {\r\n    svgEl.childNodes.forEach((child) => {\r\n      if (child instanceof Element) {\r\n        updateStrokeColorRecursively(child, stroke);\r\n      }\r\n    });\r\n  }\r\n\r\n  // update the fill color\r\n  if (fill) {\r\n    svgEl.childNodes.forEach((child) => {\r\n      if (child instanceof Element) {\r\n        child.setAttribute(\"fill\", fill);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Serialize to string\r\n  const updatedSVGString = new XMLSerializer().serializeToString(svgEl);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n      dangerouslySetInnerHTML={{ __html: updatedSVGString }}\r\n    />\r\n  );\r\n};\r\n\r\n// Update stroke color recursively\r\nconst updateStrokeColorRecursively = (element: Element, stroke: string) => {\r\n  if (element.tagName === \"path\") {\r\n    element.setAttribute(\"stroke\", stroke);\r\n  }\r\n\r\n  if (element.children) {\r\n    Array.from(element.children).forEach((child) => {\r\n      updateStrokeColorRecursively(child, stroke);\r\n    });\r\n  }\r\n};\r\n\r\n// This component will change the stroke color of the SVG file like <svg>...</svg>\r\nconst SVGComponent: React.FC<TrioSVGProps> = ({\r\n  svg,\r\n  stroke,\r\n  fill = \"none\",\r\n  width,\r\n  height,\r\n}) => {\r\n  const updatedSvg = React.cloneElement(\r\n    svg as React.ReactElement<any, string | React.JSXElementConstructor<any>>,\r\n    {\r\n      width:\r\n        width ||\r\n        (\r\n          svg as React.ReactElement<\r\n            any,\r\n            string | React.JSXElementConstructor<any>\r\n          >\r\n        ).props.width,\r\n      height:\r\n        height ||\r\n        (\r\n          svg as React.ReactElement<\r\n            any,\r\n            string | React.JSXElementConstructor<any>\r\n          >\r\n        ).props.height,\r\n      fill,\r\n      children: React.Children.map(\r\n        (\r\n          svg as React.ReactElement<\r\n            any,\r\n            string | React.JSXElementConstructor<any>\r\n          >\r\n        ).props.children,\r\n        (child) => {\r\n          if (React.isValidElement(child)) {\r\n            return convertToReactElement(child, stroke);\r\n          }\r\n          return child;\r\n        }\r\n      ),\r\n    }\r\n  );\r\n\r\n  return updatedSvg;\r\n};\r\n\r\n// Convert to React element\r\nconst convertToReactElement: any = (element: any, stroke: any) => {\r\n  const { style, children, ...rest } = element.props;\r\n\r\n  const attrs: any = {};\r\n  Object.keys(rest).forEach((key) => {\r\n    const camelKey = key.replace(/-([a-z])/g, (g) => g[1].toUpperCase());\r\n    attrs[camelKey] = rest[key];\r\n  });\r\n\r\n  const props = {\r\n    style: {\r\n      ...style,\r\n      stroke,\r\n    },\r\n    children: React.Children.map(children, (child) => {\r\n      return React.isValidElement(child)\r\n        ? convertToReactElement(child, stroke)\r\n        : child;\r\n    }),\r\n  };\r\n\r\n  return React.createElement(element.type, { ...attrs, ...props });\r\n};\r\n"]}