{"version":3,"file":"tableSlice.js","sourceRoot":"","sources":["tableSlice.ts"],"names":[],"mappings":"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","sourcesContent":["import { MemberGroup } from '@/components/Tables/MyMembers/MyMembersTable';\nimport { SortByField } from './../../../Filter/type';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface ColumnType {\n  id: any;\n  label: string;\n}\n\nexport interface GroupType {\n  id: any;\n  label: string;\n}\n\nexport interface SortedFields {\n  [key: string]: string;\n}\n\ninterface TableState {\n  columns: ColumnType[];\n  records: any[];\n  paginateRecords: any[];\n  selectedColumns: ColumnType[];\n  sortByFields: SortByField;\n  groupByFields: ColumnType[];\n  selectedGroup: ColumnType[];\n  sortOnField: SortedFields;\n  selectedRecordItems: any[];\n  selectedRecordGroup: any[];\n  paginationFields: GroupType[];\n  selectedPaginatOption:GroupType[];\n  pageCount:number;\n  page:number,\n  searchQuery:string;\n  isLoading:boolean\n}\n\nconst initialState: TableState = {\n  columns: [\n    // { id: 1, label: 'Member' },\n    // { id: 2, label: 'Email' },\n    // { id: 3, label: 'Phone' },\n    // { id: 4, label: 'Property Listed' },\n    // { id: 5, label: 'Customers' },\n    // { id: 6, label: 'Status' },\n    // { id: 7, label: 'Actions' }\n  ],\n  records: [],\n  paginateRecords:[],\n  selectedColumns: [\n    // { id: 1, label: 'Member' },\n    // { id: 2, label: 'Email' },\n    // { id: 3, label: 'Phone' },\n    // { id: 4, label: 'Property Listed' },\n    // { id: 5, label: 'Customers' },\n    // { id: 6, label: 'Status' },\n    // { id: 7, label: 'Actions' }\n  ],\n  sortByFields: {\n    // id: [\n    //   { label: 'Ascending', value: 'asc' },\n    //   { label: 'Descending', value: 'desc' }\n    // ],\n    // mail: [\n    //   { label: 'A - Z', value: 'asc' },\n    //   { label: 'Z - A', value: 'desc' }\n    // ],\n    // phone: [\n    //   { label: 'A - Z', value: 'asc' },\n    //   { label: 'Z - A', value: 'desc' }\n    // ],\n    // status: [\n    //   { label: 'Ascending', value: 'asc' },\n    //   { label: 'Descending', value: 'desc' }\n    // ],\n    // lastModified: [\n    //   { label: 'Ascending', value: 'asc' },\n    //   { label: 'Descending', value: 'desc' }\n    // ]\n  },\n  sortOnField: {},\n  groupByFields: [\n    // { id: 1, label: 'status' },\n    // { id: 2, label: 'mail' }\n  ],\n  selectedGroup: [],\n  selectedRecordItems: [],\n  selectedRecordGroup: [],\n  paginationFields: [\n    { id: 1, label: 'Total Record Count' },\n    { id: 2, label: 'Display Record Count' },\n    { id: 3, label: 'Show First & Last Page' },\n    { id: 4, label: 'Show All Page' }\n  ],\n  selectedPaginatOption:[\n  ],\n  pageCount:10,\n  page:1,\n  searchQuery:\"\",\n  isLoading:false\n\n};\n\nconst tableSlice = createSlice({\n  name: 'table',\n  initialState,\n  reducers: {\n    initRecords: (state, action: PayloadAction<any[]>) => {\n      state.records = [...action.payload];\n      state.paginateRecords=[...action.payload].slice(0,state.pageCount)\n    },\n    initFilterByColumn: (state, action: PayloadAction<ColumnType[]>) => {\n      state.columns = action.payload;\n      state.selectedColumns=action.payload\n    },\n    initFilterByGroup: (state, action: PayloadAction<ColumnType[]>) => {\n      state.groupByFields = action.payload;\n    },\n    initSortByFields: (state, action: PayloadAction<SortByField>) => {\n      state.sortByFields = action.payload;\n    },\n\n\n    setSelectedColumns: (state, action: PayloadAction<ColumnType>) => {\n      const columnToToggle = action.payload;\n      const isColumnSelected = state.selectedColumns.some((col) => col.id === columnToToggle.id);\n\n      if (isColumnSelected) {\n        // If the column is already selected, remove it\n        state.selectedColumns = state.selectedColumns.filter((col) => col.id !== columnToToggle.id);\n      } else {\n        // If the column is not selected, add it\n        state.selectedColumns.push(columnToToggle);\n      }\n    },\n    setSelectedGroup: (state, action: PayloadAction<GroupType>) => {\n      const selectedGroup = action.payload;\n      if (state.selectedGroup.length > 0 && state.selectedGroup[0].id === selectedGroup.id) {\n        state.selectedGroup = []; // Reset to an empty array if the same group is selected\n      } else {\n        state.selectedGroup = [selectedGroup]; // Set the new selected group as the only element in the array\n      }\n    },\n    setSortedFields: (state, action: PayloadAction<SortedFields>) => {\n      const selectedField = action.payload;\n      state.sortOnField = selectedField;\n    },\n    sortTableRecord: (state, action: PayloadAction<{\n      field:string;\n      order:string;\n    }>) => {\n      const { field, order } = action.payload;\n\n      state.paginateRecords.sort((a, b) => {\n        let valueA = a[field];\n        let valueB = b[field];\n\n        // Check if the values are numeric (string or number)\n        const isNumeric = !isNaN(valueA) && !isNaN(valueB);\n\n        if (isNumeric) {\n          valueA = Number(valueA);\n          valueB = Number(valueB);\n        }\n\n        let comparison = 0;\n        if (valueA < valueB) {\n          comparison = -1;\n        } else if (valueA > valueB) {\n          comparison = 1;\n        }\n\n        return order === 'asc' ? comparison : -comparison;\n      });\n    },\n    setSelectedRecordItems: (state, action: PayloadAction<any>) => {\n      const selectedItem = action.payload;\n      const isItemSelected = state.selectedRecordItems.some((item) => item.id === selectedItem.id);\n\n      if (isItemSelected) {\n        state.selectedRecordItems = state.selectedRecordItems.filter(\n          (item) => item.id !== selectedItem.id\n        );\n      } else {\n        state.selectedRecordItems.push(selectedItem);\n      }\n    },\n    setSelectedRecordGroup: (state, action: PayloadAction<any>) => {\n      const group = action.payload;\n      const isGroupFullySelected = group.groupItems.every((item: any) =>\n        state.selectedRecordItems.some((selectedItem) => selectedItem.id === item.id)\n      );\n\n      if (isGroupFullySelected) {\n        // Deselect the entire group\n        state.selectedRecordItems = state.selectedRecordItems.filter(\n          (item) => !group.groupItems.some((groupItem: any) => groupItem.id === item.id)\n        );\n        state.selectedRecordGroup = state.selectedRecordGroup.filter(\n          (g) => g.groupId !== group.groupId\n        );\n      } else {\n        // Select the entire group\n        group.groupItems.forEach((item: any) => {\n          if (!state.selectedRecordItems.some((selectedItem) => selectedItem.id === item.id)) {\n            state.selectedRecordItems.push(item);\n          }\n        });\n        if (!state.selectedRecordGroup.some((g) => g.groupId === group.groupId)) {\n          state.selectedRecordGroup.push(group);\n        }\n      }\n    },\n    selectAllRecords: (state) => {\n      const allItems = state.paginateRecords.flatMap((item) =>\n        'groupItems' in item ? item.groupItems : [item]\n      );\n      const allGroups = state.paginateRecords.filter((item): item is MemberGroup => 'groupId' in item);\n\n      if (state.selectedRecordItems.length === allItems.length) {\n        // If all items are selected, deselect all\n        state.selectedRecordItems = [];\n        state.selectedRecordGroup = [];\n      } else {\n        // Otherwise, select all\n        state.selectedRecordItems = allItems;\n        state.selectedRecordGroup = allGroups;\n      }\n    },\n    deleteSelectedRecords: (state) => {\n      const selectedIds = new Set(state.selectedRecordItems.map((item) => item.id));\n      state.paginateRecords = state.paginateRecords.filter((record) => {\n        if ('groupItems' in record) {\n          record.groupItems = record.groupItems.filter((item: any) => !selectedIds.has(item.id));\n          return record.groupItems.length > 0;\n        }\n        return !selectedIds.has(record.id);\n      });\n      state.selectedRecordItems = [];\n      state.selectedRecordGroup = [];\n    },\n    setSelectedPaginatOption: (state, action: PayloadAction<GroupType | any>) => {\n      // state.selectedPaginatOption = [...state.selectedPaginatOption,selectedField];\n      const selectedField = action.payload;\n      if (Array.isArray(action.payload)) {\n        state.selectedPaginatOption=[]\n      }else{\n        const isItemSelected = state.selectedPaginatOption.some((item) => item.id === selectedField.id);\n\n        if (isItemSelected) {\n          state.selectedPaginatOption = state.selectedPaginatOption.filter(\n            (item) => item.id !== selectedField.id\n          );\n        } else {\n          state.selectedPaginatOption.push(selectedField);\n        }\n      }\n     \n    },\n    setPageCount: (state, action: PayloadAction<number>) => {\n      state.pageCount=action.payload\n      state.paginateRecords=state.records.slice(0,state.pageCount)\n    },\n    setPage: (state, action: PayloadAction<number>) => {\n      state.page = action.payload;\n  \n      const startIndex = (state.page - 1) * state.pageCount;\n      const endIndex = Number(startIndex) + Number(state.pageCount);\n      state.paginateRecords = state.records.slice(Number(startIndex), endIndex);\n    },\n    setPaginateRecords: (state, action: PayloadAction<any[]>) => {\n      const recordsToPaginate = action.payload;\n      const startIndex = (state.page - 1) * state.pageCount;\n      const endIndex = startIndex + state.pageCount;\n      state.paginateRecords = recordsToPaginate.slice(startIndex, endIndex);\n     \n    },\n    setSearchQuery: (state, action: PayloadAction<string>) => {\n      state.searchQuery=action.payload\n    },\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.isLoading=action.payload\n    },\n  }\n});\n\nexport const {\n  initRecords,\n  initFilterByColumn,\n  initFilterByGroup,\n  initSortByFields,\n\n  setSelectedColumns,\n  setSelectedGroup,\n  setSortedFields,\n  sortTableRecord,\n  setSelectedRecordItems,\n  setSelectedRecordGroup,\n  selectAllRecords,\n  deleteSelectedRecords,\n  setSelectedPaginatOption,\n  setPageCount,\n  setPage,\n  setPaginateRecords,\n  setSearchQuery,\n  setLoading\n} = tableSlice.actions;\nexport default tableSlice.reducer;\n"]}